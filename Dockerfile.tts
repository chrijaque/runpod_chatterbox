# Build cache buster - change this to force rebuild
ARG BUILD_DATE=2025-07-23
FROM runpod/pytorch:2.8.0-py3.11-cuda12.8.1-cudnn-devel-ubuntu22.04

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Set Firebase credentials path
ENV GOOGLE_APPLICATION_CREDENTIALS=/secrets/firebase.json

# Install system dependencies including FFmpeg
RUN apt-get update && \
    apt-get install -y \
    git \
    wget \
    curl \
    ffmpeg \
    libavcodec-extra \
    libavformat-dev \
    libavutil-dev \
    libswscale-dev && \
    rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt /requirements.txt

# Install Python dependencies with verbose pip output

# Debug: Show what's in requirements.txt
RUN echo "📋 Contents of requirements.txt:" && cat requirements.txt

# Clone the forked repository and install in editable mode
RUN echo "🔧 Cloning forked repository..." && \
    echo "🔍 Testing repository access..." && \
    curl -s -o /dev/null -w "%{http_code}" https://github.com/chrijaque/chatterbox_embed && \
    echo "🔧 Uninstalling existing PyTorch packages to prevent conflicts..." && \
    pip uninstall -y torch torchvision torchaudio chatterbox-tts || true && \
    echo "🔧 Cloning forked repository..." && \
    git clone https://github.com/chrijaque/chatterbox_embed.git /workspace/chatterbox_embed && \
    echo "🔧 Installing forked repository in editable mode..." && \
    pip install -e /workspace/chatterbox_embed/src && \
    echo "🔍 Verifying forked repository installation..." && \
    pip show chatterbox-tts | grep -E "(Location|Version)" && \
    python -c "import chatterbox; print('✅ chatterbox imported from:', chatterbox.__file__)"

# Debug: Check which repository was installed
RUN echo "🔍 Checking installed repository..." && \
    pip show chatterbox-tts

# Install other requirements (excluding chatterbox-tts since it's already installed)
RUN echo "🔧 Installing other requirements..." && \
    pip install -v -r requirements.txt && \
    echo "🔍 Verifying chatterbox-tts is still from forked repo..." && \
    pip show chatterbox-tts | grep -E "(Location|Version)"

# Pre-download NLTK data to avoid runtime issues
RUN echo "🔧 Pre-downloading NLTK data..." && \
    python -c "import nltk; nltk.download('punkt', quiet=True)" && \
    python -c "import nltk.data; nltk.data.find('tokenizers/punkt')" && \
    python -c "from nltk.tokenize.punkt import PunktSentenceTokenizer; tokenizer = PunktSentenceTokenizer(); tokenizer.tokenize('Test sentence. Another one.')" && \
    echo "✅ NLTK punkt tokenizer fully configured"

# Copy TTS handler files
COPY tts_handler.py /
COPY verify_editable_install.py /


# Create required directories
RUN mkdir -p /voice_profiles /tts_generated /temp_voice

# Model will be downloaded at runtime when needed

# Final verification after all installations
RUN echo "🔍 Final verification after all installations..." && \
    pip show chatterbox-tts && \
    echo "🔍 Final editable install check..." && \
    python -c "import chatterbox; print('📂 Final chatterbox.__file__:', chatterbox.__file__); print('📂 Is editable:', 'site-packages' not in chatterbox.__file__)" && \
    echo "🔍 Checking s3gen module..." && \
    python -c "import chatterbox.models.s3gen.s3gen as s3gen; print('📂 s3gen.__file__:', s3gen.__file__); print('📂 Has inference_from_text:', hasattr(s3gen.S3Token2Wav, 'inference_from_text'))" && \
    echo "🔍 Running verification script..." && \
    python verify_editable_install.py

# Expose port (if needed for health checks)
EXPOSE 8000

# Set the entrypoint to the TTS handler directly
CMD ["python3", "-u", "tts_handler.py"] 