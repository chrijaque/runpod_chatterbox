# Build cache buster - change this to force rebuild
ARG BUILD_DATE=2025-07-23
FROM runpod/pytorch:2.8.0-py3.11-cuda12.8.1-cudnn-devel-ubuntu22.04

# Set environment variables
ENV PYTHONUNBUFFERED=1

# Copy requirements first for better caching
COPY requirements.txt /requirements.txt

# Install Python dependencies with verbose pip output

# Debug: Show what's in requirements.txt
RUN echo "üìã Contents of requirements.txt:" && cat requirements.txt

# Step 1: Install forked repository FIRST to prevent dependency conflicts
RUN echo "üîß STEP 1: Installing forked repository FIRST..." && \
    pip install -v git+https://github.com/chrijaque/chatterbox_embed.git#egg=chatterbox-tts

# Step 2: Verify forked repository is installed
RUN echo "üîç STEP 2: Verifying forked repository installation..." && \
    python -c "import chatterbox; print('üì¶ chatterbox module path:', chatterbox.__file__)" && \
    python -c "import chatterbox; import os; repo_path = os.path.dirname(chatterbox.__file__); print('üìÅ chatterbox directory:', repo_path)" && \
    python -c "import chatterbox; import os; repo_path = os.path.dirname(chatterbox.__file__); git_path = os.path.join(repo_path, '.git'); print('üîç .git exists:', os.path.exists(git_path))" && \
    python -c "from chatterbox.tts import ChatterboxTTS; model = ChatterboxTTS.from_pretrained(device='cpu'); print('‚úÖ Model loaded successfully'); print('üîç save_voice_profile available:', hasattr(model, 'save_voice_profile)); print('üîç load_voice_profile available:', hasattr(model, 'load_voice_profile))"

# Step 3: Install other requirements with dependency conflict prevention
RUN echo "üîß STEP 3: Installing other requirements..." && \
    pip install -v -r requirements.txt --no-deps

# Step 4: Final verification after all installations
RUN echo "üîç STEP 4: Final verification after all installations..." && \
    python -c "import chatterbox; print('üì¶ FINAL chatterbox module path:', chatterbox.__file__)" && \
    python -c "import chatterbox; import os; repo_path = os.path.dirname(chatterbox.__file__); print('üìÅ FINAL chatterbox directory:', repo_path)" && \
    python -c "import chatterbox; import os; repo_path = os.path.dirname(chatterbox.__file__); git_path = os.path.join(repo_path, '.git'); print('üîç FINAL .git exists:', os.path.exists(git_path))" && \
    python -c "from chatterbox.tts import ChatterboxTTS; model = ChatterboxTTS.from_pretrained(device='cpu'); print('‚úÖ FINAL Model loaded successfully'); print('üîç FINAL save_voice_profile available:', hasattr(model, 'save_voice_profile)); print('üîç FINAL load_voice_profile available:', hasattr(model, 'load_voice_profile))" && \
    pip show chatterbox-tts

# Debug: Check which chatterbox is installed
RUN echo "üîç Checking chatterbox installation:" && \
    python -c "import chatterbox; print(f'üì¶ chatterbox module path: {chatterbox.__file__}')" && \
    python -c "import chatterbox; import os; repo_path = os.path.dirname(chatterbox.__file__); print(f'üìÅ chatterbox directory: {repo_path}')" && \
    python -c "import chatterbox; import os; repo_path = os.path.dirname(chatterbox.__file__); git_path = os.path.join(repo_path, '.git'); print(f'üîç .git exists: {os.path.exists(git_path)}')" && \
    python -c "import chatterbox; print(f'üìã chatterbox version: {getattr(chatterbox, \"__version__\", \"Unknown\")}')" && \
    python -c "from chatterbox.tts import ChatterboxTTS; model = ChatterboxTTS.from_pretrained(device='cpu'); print(f'‚úÖ Model loaded successfully'); print(f'üîç Available methods: {[m for m in dir(model) if \"voice\" in m.lower() or \"profile\" in m.lower()]}')"

# Copy TTS handler files
COPY tts_handler.py /
COPY download_model.py /
COPY diagnose_chatterbox.py /

# Create required directories
RUN mkdir -p /voice_profiles /tts_generated /temp_voice

# Download and verify model with detailed error reporting
RUN python3 -u download_model.py 2>&1

# Run diagnostic script to verify installation
RUN echo "üîç Running diagnostic script..." && python diagnose_chatterbox.py

# Expose port (if needed for health checks)
EXPOSE 8000

# Set the entrypoint to the TTS handler
CMD ["python3", "-u", "tts_handler.py"] 