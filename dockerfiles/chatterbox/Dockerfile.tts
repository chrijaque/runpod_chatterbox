
FROM runpod/pytorch:2.8.0-py3.11-cuda12.8.1-cudnn-devel-ubuntu22.04

# Set environment variables for logging
ENV PYTHONUNBUFFERED=1
ENV PYTHONFAULTHANDLER=1
ENV PYTHON_UNBUFFERED="true"
ENV DEBIAN_FRONTEND=noninteractive

# Optional HF token for private models (pass at build time)
ARG HF_TOKEN=""

# Setup environment for Hugging Face model cache baked into the image
ENV HF_HOME=/models/hf \
    HF_HUB_CACHE=/models/hf/hub \
    TRANSFORMERS_CACHE=/models/hf

# Firebase credentials will be provided via RunPod secrets
# ENV GOOGLE_APPLICATION_CREDENTIALS=/secrets/firebase.json

# Install system dependencies including FFmpeg
RUN apt-get update && \
    apt-get install -y \
    git \
    wget \
    curl \
    ffmpeg \
    libavcodec-extra \
    libavformat-dev \
    libavutil-dev \
    libswscale-dev && \
    rm -rf /var/lib/apt/lists/*

# Install system dependencies for audio processing
RUN apt-get update && apt-get install -y \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Set git global config to avoid warnings
RUN git config --global --add safe.directory '*'

# Copy requirements first for better caching
COPY requirements/chatterbox.txt /requirements.txt

# Create filtered requirements without PyTorch packages
RUN echo "üîß Creating filtered requirements..." && \
    grep -v "torch" requirements.txt > /filtered_requirements.txt && \
    echo "üìã Original requirements:" && cat requirements.txt && \
    echo "üìã Filtered requirements:" && cat /filtered_requirements.txt

# Add build argument to force cache invalidation
ARG CACHE_BUST=1
ARG BUILD_TIME
ARG RUNPOD_CACHE_BUST=1
ARG CHATTERBOX_REF=master

# Invalidate cache when the selected ref's HEAD changes
ADD https://api.github.com/repos/chrijaque/chatterbox_embed/commits/${CHATTERBOX_REF} /tmp/chatterbox_head.json

# Cache-bust layer: change RUNPOD_CACHE_BUST each build to force refetch
RUN echo "üßπ Cache bust: ${CACHE_BUST}-${RUNPOD_CACHE_BUST} at ${BUILD_TIME}" && true

# Clone the forked repository and install in editable mode
RUN echo "üîß Cloning forked repository..." && \
    echo "üîç Testing repository access..." && \
    curl -s -o /dev/null -w "%{http_code}" https://github.com/chrijaque/chatterbox_embed.git && \
    echo "üîß Uninstalling existing packages to prevent conflicts..." && \
    pip uninstall -y chatterbox-tts torch torchvision torchaudio || echo "No packages to uninstall" && \
    echo "üîß Cloning forked repository..." && \
    git clone https://github.com/chrijaque/chatterbox_embed.git /workspace/chatterbox_embed && \
    cd /workspace/chatterbox_embed && \
    echo "üîß Fetching ref ${CHATTERBOX_REF}..." && \
    git fetch --tags --force origin ${CHATTERBOX_REF} || true && \
    if git ls-remote --exit-code origin ${CHATTERBOX_REF} >/dev/null 2>&1; then \
      REF=origin/${CHATTERBOX_REF}; \
    else \
      REF=${CHATTERBOX_REF}; \
    fi && \
    echo "üîß Checking out ${REF}..." && \
    git checkout --detach ${REF} && \
    echo "üîß Checking repository structure..." && \
    ls -la /workspace/chatterbox_embed/ && \
    echo "üîß Checking forked repository requirements..." && \
    cat /workspace/chatterbox_embed/requirements.txt && \
    echo "üîß Using PyTorch from base image (2.8.0) - no explicit installation needed" && \
    echo "üîß Installing forked repository in editable mode..." && \
    pip install -e /workspace/chatterbox_embed && \
    echo "üîç Verifying forked repository installation..." && \
    pip show chatterbox-tts | grep -E "(Location|Version)" && \
    python -c "import chatterbox; print('‚úÖ chatterbox imported from:', chatterbox.__file__)"

# Debug: Checkity which repository was installed
RUN echo "üîç Checking installed repository..." && \
    pip show chatterbox-tts && \
    echo "üîç Checking if it's an editable install..." && \
    python -c "import chatterbox; print('üìÇ chatterbox.__file__:', chatterbox.__file__); print('üìÇ Is editable:', 'site-packages' not in chatterbox.__file__)"

# Install other requirements (excluding PyTorch packages since they're already installed)
RUN echo "üîß Installing other requirements..." && \
    pip install -v -r /filtered_requirements.txt && \
    echo "üîß Installing RunPod SDK..." && \
    pip install runpod>=1.5.0 && \
    echo "üîç Verifying chatterbox-tts is still from forked repo..." && \
    pip show chatterbox-tts | grep -E "(Location|Version)"

# Pre-download Hugging Face models into the image cache to avoid runtime downloads
RUN echo "üîß Preparing HF cache for predownload..." && \
    mkdir -p /models/hf/hub && \
    if [ -n "$HF_TOKEN" ]; then \
      echo "üîë Using HF token for non-interactive login" && \
      huggingface-cli login --token "$HF_TOKEN" >/dev/null 2>&1 || true ; \
    else \
      echo "‚ÑπÔ∏è No HF token provided; assuming public repo" ; \
    fi && \
    python - <<'PY'
from huggingface_hub import snapshot_download
print("üîΩ Pre-downloading ResembleAI/chatterbox (including all model assets)...")
snapshot_download(
    repo_id="ResembleAI/chatterbox",
    revision="main",
)
print("‚úÖ Pre-download complete.")
PY

# Pre-download NLTK data to avoid runtime issues
RUN echo "üîß Pre-downloading NLTK data..." && \
    python -c "import nltk; nltk.download('punkt', quiet=True)" && \
    python -c "import nltk.data; nltk.data.find('tokenizers/punkt')" && \
    python -c "from nltk.tokenize.punkt import PunktSentenceTokenizer; tokenizer = PunktSentenceTokenizer(); tokenizer.tokenize('Test sentence. Another one.')" && \
    echo "‚úÖ NLTK punkt tokenizer fully configured"

# Copy TTS handler files
COPY handlers/chatterbox/tts_handler.py /


# Create required directories
RUN mkdir -p /voice_profiles /tts_generated /temp_voice

# Models are pre-downloaded into the image; runtime will use the baked cache

# Final verification after all installations
RUN echo "üîç Final verification after all installations..." && \
    pip show chatterbox-tts && \
    echo "üîç Final editable install check..." && \
    python -c "import chatterbox; print('üìÇ Final chatterbox.__file__:', chatterbox.__file__); print('üìÇ Is editable:', 'site-packages' not in chatterbox.__file__)" && \
    echo "üîç Checking s3gen module..." && \
    python -c "import chatterbox.models.s3gen.s3gen as s3gen; print('üìÇ s3gen.__file__:', s3gen.__file__); print('üìÇ Has inference_from_text:', hasattr(s3gen.S3Token2Wav, 'inference_from_text'))"

# Expose port (if needed for health checks)
EXPOSE 8000

# Set the entrypoint to the TTS handler directly
CMD ["python3", "-u", "tts_handler.py"] 