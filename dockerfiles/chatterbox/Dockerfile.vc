
FROM runpod/pytorch:2.8.0-py3.11-cuda12.8.1-cudnn-devel-ubuntu22.04

WORKDIR /

# Set environment variables for logging
ENV PYTHONUNBUFFERED=1
ENV PYTHONFAULTHANDLER=1
ENV PYTHON_UNBUFFERED="true"
ENV DEBIAN_FRONTEND=noninteractive

# Firebase credentials will be provided via RunPod secrets
# ENV GOOGLE_APPLICATION_CREDENTIALS=/secrets/firebase.json

# Install system dependencies including FFmpeg
RUN apt-get update && \
    apt-get install -y \
    git \
    wget \
    curl \
    ffmpeg \
    libavcodec-extra \
    libavformat-dev \
    libavutil-dev \
    libswscale-dev && \
    rm -rf /var/lib/apt/lists/*

# Install system dependencies for audio processing
RUN apt-get update && apt-get install -y \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Set git global config to avoid warnings
RUN git config --global --add safe.directory '*'

# Optional HF token for private models (pass at build time)
ARG HF_TOKEN=""

# Setup environment for Hugging Face model cache baked into the image
ENV HF_HOME=/models/hf \
    HF_HUB_CACHE=/models/hf/hub \
    TRANSFORMERS_CACHE=/models/hf

# Install Python dependencies with verbose pip output
COPY requirements/chatterbox.txt /requirements.txt

# Debug: Show what's in requirements.txt
RUN echo "üìã Contents of requirements.txt:" && cat requirements.txt

# Add build argument to force cache invalidation
ARG CACHE_BUST=1
ARG BUILD_TIME
ARG RUNPOD_CACHE_BUST

# Clone the forked repository and install in editable mode
RUN echo "üîß Cloning forked repository..." && \
    echo "üîç Testing repository access..." && \
    curl -s -o /dev/null -w "%{http_code}" https://github.com/chrijaque/chatterbox_embed && \
    echo "üîß Uninstalling existing PyTorch packages to prevent conflicts..." && \
    pip uninstall -y torch torchvision torchaudio chatterbox-tts || true && \
    echo "üîß Cloning forked repository..." && \
    git clone https://github.com/chrijaque/chatterbox_embed.git /workspace/chatterbox_embed && \
    cd /workspace/chatterbox_embed && \
    echo "üîß Fetching latest changes..." && \
    git fetch origin && \
    echo "üîß Detecting default branch..." && \
    DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5) && \
    echo "üîß Default branch is: $DEFAULT_BRANCH" && \
    echo "üîß Resetting to latest $DEFAULT_BRANCH branch..." && \
    git reset --hard origin/$DEFAULT_BRANCH && \
    echo "üîß Installing forked repository in editable mode..." && \
    pip install -e /workspace/chatterbox_embed && \
    echo "üîç Verifying forked repository installation..." && \
    pip show chatterbox-tts | grep -E "(Location|Version)" && \
    python -c "import chatterbox; print('‚úÖ chatterbox imported from:', chatterbox.__file__)"

# Debug: Check which repository was installed
RUN echo "üîç Checking installed repository..." && \
    pip show chatterbox-tts && \
    echo "üîç Checking if it's an editable install..." && \
    python -c "import chatterbox; print('üìÇ chatterbox.__file__:', chatterbox.__file__); print('üìÇ Is editable:', 'site-packages' not in chatterbox.__file__)"

# Install other requirements (excluding chatterbox-tts since it's already installed)
RUN echo "üîß Installing other requirements..." && \
    pip install -v -r requirements.txt && \
    echo "üîç Verifying chatterbox-tts is still from forked repo..." && \
    pip show chatterbox-tts | grep -E "(Location|Version)"

# Pre-download Hugging Face models into the image cache to avoid runtime downloads
RUN echo "üîß Preparing HF cache for predownload..." && \
    mkdir -p /models/hf/hub && \
    if [ -n "$HF_TOKEN" ]; then \
      echo "üîë Using HF token for non-interactive login" && \
      huggingface-cli login --token "$HF_TOKEN" >/dev/null 2>&1 || true ; \
    else \
      echo "‚ÑπÔ∏è No HF token provided; assuming public repo" ; \
    fi && \
    python - <<'PY'
from huggingface_hub import snapshot_download
print("üîΩ Pre-downloading ResembleAI/chatterbox (excluding t3_23lang.safetensors)...")
snapshot_download(
    repo_id="ResembleAI/chatterbox",
    revision="main",
    ignore_patterns=["t3_23lang.safetensors"],
)
print("‚úÖ Pre-download complete.")
PY

# Copy files
COPY handlers/chatterbox/vc_handler.py /

# Create required directories
RUN mkdir -p /voice_profiles /voice_samples /temp_voice

# Models are pre-downloaded into the image; runtime will use the baked cache

# Final verification after all installations
RUN echo "üîç Final verification after all installations..." && \
    pip show chatterbox-tts && \
    echo "üîç Final editable install check..." && \
    python -c "import chatterbox; print('üìÇ Final chatterbox.__file__:', chatterbox.__file__); print('üìÇ Is editable:', 'site-packages' not in chatterbox.__file__)" && \
    echo "üîç Checking s3gen module..." && \
    python -c "import chatterbox.models.s3gen.s3gen as s3gen; print('üìÇ s3gen.__file__:', s3gen.__file__); print('üìÇ Has inference_from_text:', hasattr(s3gen.S3Token2Wav, 'inference_from_text'))"

# Start the container with diagnostic
CMD ["python3", "-u", "vc_handler.py"]


